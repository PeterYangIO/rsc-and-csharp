import { Api, ApiConfig } from "./_api";
import type { ReadonlyRequestCookies } from "next/dist/server/app-render";

/**
 * Apply a thin wrapper around the autogenerated API client to handle
 * authentication and cookie management.
 * 
 * Also see: `pages/api/[...route].ts`
 */
export default class APIClient {
    private static cookies: () => ReadonlyRequestCookies;
    private static getServerCookie(name: string) {
        if (!isServer()) {
            return "";
        }

        if (!APIClient.cookies) {
            // Conditionally load when accessing for first time in a server context
            // Cannot import at top of file because it will break client-side
            APIClient.cookies = require("next/headers").cookies;
        }
        return APIClient.cookies().get(name)?.value;
    }

    public static get instance() {
        const apiConfig: ApiConfig<null> = {};

        // We only need to handle server side requests here.
        // For client side requests see `pages/route/api/[...route].ts`
        if (isServer()) {
            apiConfig.baseUrl = process.env.BACKEND_URL;
            apiConfig.customFetch = (input, init) => {
                const modifiedInit = { ...init };
                modifiedInit.headers = {
                    ...init?.headers,
                    Authorization: `Bearer ${APIClient.getServerCookie("auth-token")}`
                };
                return fetch(input, modifiedInit);
            };
        } else {
            apiConfig.baseUrl = `${window.location.origin}/api`;
        }

        return new Api(apiConfig);
    }
}

function isServer() {
    return typeof window === "undefined";
}
